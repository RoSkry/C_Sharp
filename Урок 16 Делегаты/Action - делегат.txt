Action<T> - делегат
 
Инкапсулирует метод, который принимает от 0 до 16 параметров и НЕ ВОЗВРАЩАЕТ значений.

Пространство имен:   System
Сборка:  mscorlib (в mscorlib.dll)

Синтаксис
public delegate void Action<in T>(T obj)

Параметры
obj
Параметр метода, инкапсулируемого данным делегатом.
Параметры типа
T
Тип параметра метода, инкапсулируемого данным делегатом.

Заметки
Этот делегат можно использовать для передачи метода в качестве параметра без явного объявления пользовательского делегата.Инкапсулируемый метод должен соответствовать заданной этим делегатом сигнатуре метода.Это означает, что инкапсулируемый метод должен не иметь параметров и не возвращать значение. (В C# метод должен возвращать void.В Visual Basic он должен определяться конструкцией Sub…End Sub.Это также может быть метод, возвращающий значение, которое будет проигнорировано.) Обычно такой метод используется для выполнения операции.

Примечание
Для создания ссылки на возвращающий значение метод без параметров вместо этого используется универсальный метод-делегат Func<TResult>.

При использовании делегата Action не нужно явным образом определять делегат, инкапсулирующий процедуру без параметров.Например, в следующем коде выполняется явное объявление делегата с именем ShowValue и ссылка на метод экземпляра Name.DisplayToWindow присваивается экземпляру его делегата.

using System;
using System.Windows.Forms;

delegate void DisplayMessage(string message);

public class TestCustomDelegate
{
   public static void Main()
   {
      DisplayMessage messageTarget; 

      if (Environment.GetCommandLineArgs().Length > 1)
         messageTarget = ShowWindowsMessage;
      else
         messageTarget = Console.WriteLine;

      messageTarget("Hello, World!");   
   }      

   private static void ShowWindowsMessage(string message)
   {
      MessageBox.Show(message);      
   }
}

В следующем примере этот код упрощается путем создания экземпляра делегата Action вместо явного объявления нового делегата и присвоения ему именованного метода.
using System;
using System.Windows.Forms;

public class TestAction1
{
   public static void Main()
   {
      Action<string> messageTarget; 

      if (Environment.GetCommandLineArgs().Length > 1)
         messageTarget = ShowWindowsMessage;
      else
         messageTarget = Console.WriteLine;

      messageTarget("Hello, World!");   
   }      

   private static void ShowWindowsMessage(string message)
   {
      MessageBox.Show(message);      
   }
}

Кроме того, в языке C# делегат Action можно использовать с анонимными методами, как показано в следующем примере. (Введение в анонимные методы см. в разделе Анонимные методы (Руководство по программированию в C#).)
using System;
using System.Windows.Forms;

public class TestAnonMethod
{
   public static void Main()
   {
      Action<string> messageTarget; 

      if (Environment.GetCommandLineArgs().Length > 1)
         messageTarget = delegate(string s) { ShowWindowsMessage(s); };
      else
         messageTarget = delegate(string s) { Console.WriteLine(s); };

      messageTarget("Hello, World!");
   }

   private static void ShowWindowsMessage(string message)
   {
      MessageBox.Show(message);      
   }
}

Еще экземпляру делегата Action можно присвоить лямбда-выражение, как показано в следующем примере. (Введение в лямбда-выражения см. в разделе Lambda Ifadeleri (C# Programlama K?lavuzu).)
using System;
using System.Windows.Forms;

public class TestLambdaExpression
{
   public static void Main()
   {
      Action<string> messageTarget; 

      if (Environment.GetCommandLineArgs().Length > 1)
         messageTarget = s => ShowWindowsMessage(s); 
      else
         messageTarget = s => Console.WriteLine(s);

      messageTarget("Hello, World!");
   }

   private static void ShowWindowsMessage(string message)
   {
      MessageBox.Show(message);      
   }
}

The ForEach and ForEach<T> methods each take an Action<T> delegate as a parameter.The method encapsulated by the delegate allows you to perform an action on each element in the array or list.The example uses the ForEach method to provide an illustration.

Примеры
The following example demonstrates the use of the Action<T> delegate to print the contents of a List<T> object.In this example, the Print method is used to display the contents of the list to the console.In addition, the C# example also demonstrates the use of anonymous methods to display the contents to the console.Note that the example does not explicitly declare an Action<T> variable.Instead, it passes a reference to a method that takes a single parameter and that does not return a value to the List<T>.ForEach method, whose single parameter is an Action<T> delegate.Similarly, in the C# example, an Action<T> delegate is not explicitly instantiated because the signature of the anonymous method matches the signature of the Action<T> delegate that is expected by the List<T>.ForEach method.

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        List<String> names = new List<String>();
        names.Add("Bruce");
        names.Add("Alfred");
        names.Add("Tim");
        names.Add("Richard");

        // Display the contents of the list using the Print method.
        names.ForEach(Print);

        // The following demonstrates the anonymous method feature of C#
        // to display the contents of the list to the console.
        names.ForEach(delegate(String name)
        {
            Console.WriteLine(name);
        });
    }

    private static void Print(string s)
    {
        Console.WriteLine(s);
    }
}
/* This code will produce output similar to the following:
 * Bruce
 * Alfred
 * Tim
 * Richard
 * Bruce
 * Alfred
 * Tim
 * Richard
 */