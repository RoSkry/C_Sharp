Type - класс
 
Представляет объявления типов для классов, интерфейсов, массивов, значений, перечислений параметров, определений универсальных типов и открытых или закрытых сконструированных универсальных типов.
Просмотреть исходный код .NET Framework для этого типа Reference Source.
Пространство имен:   System
Сборка:  mscorlib (в mscorlib.dll)

Иерархия наследования
System.Object
  System.Reflection.MemberInfo
    System.Type
      System.Reflection.TypeInfo

Синтаксис
[SerializableAttribute]
[ClassInterfaceAttribute(ClassInterfaceType.None)]
[ComVisibleAttribute(true)]
public abstract class Type : MemberInfo, _Type, IReflect

Конструкторы
 Type()	Инициализирует новый экземпляр класса Type.

Свойства
 Assembly	Возвращает объект Assembly, в котором объявлен тип. Для универсальных типов возвращает объект сборки Assembly, в которой определен универсальный тип.
 AssemblyQualifiedName	Возвращает имя типа с указанием сборки, включающее имя сборки, из которой был загружен объект Type.
 Attributes	Возвращает атрибуты, связанные с объектом Type.
 BaseType	Возвращает тип, для которого текущий объект Type является непосредственным наследником.
 ContainsGenericParameters	Возвращает значение, позволяющее определить, имеются ли у текущего объекта Type параметры типа, которые не были замещены указанными типами.
 CustomAttributes	Возвращает коллекцию, содержащую пользовательские атрибуты этого элемента.(Наследуется от MemberInfo.)
 DeclaringMethod	Возвращает метод MethodBase, который представляет объявляемый метод, если текущий Type представляет параметр типа универсального метода.
 DeclaringType	Возвращает тип, объявивший текущий вложенный тип или параметр универсального типа.(Переопределяет MemberInfo.DeclaringType.)
 static	DefaultBinder	Возвращает ссылку на связыватель по умолчанию, который реализует внутренние правила выбора соответствующих членов, вызываемых методом InvokeMember.
 FullName	Возвращает полное имя типа, включая пространство имен, но не сборку.
 GenericParameterAttributes	Возвращает сочетание флагов GenericParameterAttributes, описывающих ковариацию и особые ограничения текущего параметра универсального типа.
 GenericParameterPosition	Возвращает позицию параметра типа в списке параметров универсального типа или метода, который объявил параметр, если объект Type представляет параметр универсального типа или метода.
 GenericTypeArguments	Возвращает массив аргументов универсального типа для этого типа.
 GUID	Возвращает идентификатор GUID, связанный с объектом Type.
 HasElementType	Возвращает значение, позволяющее определить, содержит ли текущий объект Type в себе другой тип или ссылку на другой тип (иными словами, является ли текущий объект Type массивом, указателем либо параметром или же он передается по ссылке).
 IsAbstract	Возвращает значение, показывающее, является ли данный объект Type абстрактным объектом, который должен быть переопределен.
 IsAnsiClass	Возвращает значение, позволяющее определить, выбран ли для объекта AnsiClass атрибут формата строки Type.
 IsArray	Возвращает значение, показывающее, является ли тип массивом.
 IsAutoClass	Возвращает значение, позволяющее определить, выбран ли для объекта AutoClass атрибут формата строки Type.
 IsAutoLayout	Возвращает значение, указывающее, выкладываются ли поля текущего типа автоматически средой CLR.
 IsByRef	Возвращает значение, указывающее, передан ли объект Type по ссылке.
 IsClass	Получает значение, позволяющее определить, является объект Type классом или делегатом (иными словами, не является типом значения или интерфейсом).
 IsCOMObject	Возвращает значение, указывающее, является ли объект Type COM-объектом.
 IsConstructedGenericType	Возвращает значение, указывающее, представляет ли этот данный объект сконструированный универсальный тип. Можно создать экземпляры сконструированного универсального типа.
 IsContextful	Возвращает значение, позволяющее определить, можно ли поместить в контекст объект Type.
 IsEnum	Возвращает значение, позволяющее определить, представляет ли текущий объект Type перечисление.
 IsExplicitLayout	Возвращает значение, указывающее, выкладываются ли поля текущего типа с явно заданными смещениями.
 IsGenericParameter	Возвращает значение, позволяющее определить, представляет ли текущий объект Type параметр типа в определении универсального типа или метода.
 IsGenericType	Возвращает значение, указывающее, является ли текущий тип универсальным.
 IsGenericTypeDefinition	Возвращает значение, позволяющее определить, представляет ли текущий объект Type определение универсального типа, на основе которого можно сконструировать другие универсальные типы.
 IsImport	Возвращает значение, позволяющее определить, есть ли у объекта Type атрибут ComImportAttribute, свидетельствующий о том, что объект был импортирован из библиотеки COM-типов.
 IsInterface	Возвращает значение, позволяющее определить, является ли объект Type интерфейсом (иными словами, не является классом или типом значения).
 IsLayoutSequential	Возвращает значение, указывающее, выкладываются ли поля текущего типа последовательно, в том порядке, в котором они были определены, или выдаются в метаданные.
 IsMarshalByRef	Возвращает значение, указывающее, маршалирован ли объект Type по ссылке.
 IsNested	Возвращает значение, позволяющее определить, представляет ли текущий объект Type тип, определение которого вложено в определение другого типа.
 IsNestedAssembly	Возвращает значение, позволяющее определить, является ли объект Type вложенным и видимым только в своей сборке.
 IsNestedFamANDAssem	Возвращает значение, позволяющее определить, является ли объект Type вложенным и видимым только для классов, принадлежащих одновременно к семейству и сборке этого объекта.
 IsNestedFamily	Возвращает значение, позволяющее определить, является ли объект Type вложенным и видимым только в своем семействе.
 IsNestedFamORAssem	Возвращает значение, позволяющее определить, является ли данный объект Type вложенным и видимым только для классов, принадлежащих либо к его семейству, либо к его сборке.
 IsNestedPrivate	Возвращает значение, позволяющее определить, является ли объект Type вложенным и объявленным как закрытый.
 IsNestedPublic	Возвращает значение, позволяющее определить, является ли класс вложенным и объявленным как открытый.
 IsNotPublic	Возвращает значение, позволяющее определить, не был ли объект Type объявлен как открытый.
 IsPointer	Возвращает значение, указывающее, является ли объект Type указателем.
 IsPrimitive	Возвращает значение, указывающее, является ли Type одним из типов-примитивов.
 IsPublic	Возвращает значение, позволяющее определить, был ли объект Type объявлен как открытый.
 IsSealed	Возвращает значение, позволяющее определить, был ли объект Type объявлен как запечатанный.
 IsSecurityCritical	Возвращает значение, которое указывает, является ли текущий тип критически важным для безопасности или защищенным критически важным для безопасности на данном уровне доверия и, следовательно, может ли он выполнять критические операции.
 IsSecuritySafeCritical	Возвращает значение, которое указывает, является ли текущий тип защищенным критически важным для безопасности на текущем уровне доверия и, следовательно, может ли он выполнять критические операции и предоставлять доступ прозрачному коду.
 IsSecurityTransparent	Возвращает значение, которое указывает, является ли текущий тип прозрачным на текущем уровне доверия и, следовательно, не может выполнять критические операции.
 IsSerializable	Возвращает значение, позволяющее определить, сериализуем ли объект Type.
 IsSpecialName	Возвращает значение, позволяющее определить, требует ли имя данного объекта специальной обработки.
 IsUnicodeClass	Возвращает значение, позволяющее определить, выбран ли для объекта UnicodeClass атрибут формата строки Type.
 IsValueType	Возвращает значение, позволяющее определить, является ли объект Type типом значения.
 IsVisible	Возвращает значение, позволяющее определить, можно ли получить доступ к объекту Type из кода за пределами сборки.
 MemberType	Возвращает значение MemberTypes, позволяющее определить, каким типом является этот член: обычным или вложенным.(Переопределяет MemberInfo.MemberType.)
 MetadataToken	Возвращает значение, определяющее элемент метаданных.(Наследуется от MemberInfo.)
 Module	Возвращает модуль (DLL), в котором определен текущий объект Type.
 Name	Возвращает имя текущего элемента.(Наследуется от MemberInfo.)
 Namespace	Возвращает пространство имен объекта Type.
 ReflectedType	Возвращает объект класса, который использовался для получения этого члена.(Переопределяет MemberInfo.ReflectedType.)
 StructLayoutAttribute	Возвращает атрибут StructLayoutAttribute, описывающий структуру текущего типа.
 TypeHandle	Возвращает дескриптор текущего объекта Type.
 TypeInitializer	Возвращает инициализатор типа.
 UnderlyingSystemType	Указывает на тип, предоставляемый средой CLR, представляющей этот тип.

Методы
 Equals(Object)	Определяет, если базовый системный тип текущего Type объект совпадает с базовым системным типом указанного Object.(Переопределяет MemberInfo.Equals(Object).)
 Equals(Type)	Позволяет определить, совпадает ли базовый системный тип текущего объекта Type с базовым системным типом указанного объекта Type.
 Finalize()	Позволяет объекту попытаться освободить ресурсы и выполнить другие операции по очистке перед тем, как объект будет утилизирован сборщиком мусора. (Наследуется от Object.)
 FindInterfaces(TypeFilter, Object)	Возвращает массив объектов Type, представляющий отфильтрованный список интерфейсов, реализованных или наследуемых текущим объектом Type.
 FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)	Возвращает отфильтрованный массив объектов MemberInfo, тип которого совпадает с указанным типом члена.
 GetArrayRank()	Возвращает размерность массива.
 GetAttributeFlagsImpl()	При переопределении в производном классе реализует свойство Attributes и возвращает битовую маску, позволяющую определить атрибуты, связанные с объектом Type.
 GetConstructor(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])	Выполняет поиск конструктора с параметрами, соответствующими указанным модификаторам и типам аргументов, с учетом заданных ограничений по связыванию и соглашений о вызовах.
 GetConstructor(BindingFlags, Binder, Type[], ParameterModifier[])	Выполняет поиск конструктора, параметры которого соответствуют указанным типам аргументов и модификаторам, используя заданные ограничения привязки.
 GetConstructor(Type[])	Выполняет поиск открытого конструктора экземпляра, параметры которого соответствуют типам, содержащимся в указанном массиве.
 GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])	При переопределении в производном классе ищет конструктор, параметры которого соответствуют указанным типам аргументов и модификаторам, используя для этого заданные ограничения привязки и соглашение о вызовах.
 GetConstructors()	Возвращает все открытые конструкторы, определенные для текущего объекта Type.
 GetConstructors(BindingFlags)	При переопределении в производном классе ищет конструкторы, определенные для текущего объекта Type, с использованием указанного объекта BindingFlags.
 GetCustomAttributes(Boolean)	При переопределении в производном классе возвращает массив всех настраиваемых атрибутов, применяемых к этому члену.(Наследуется от MemberInfo.)
 GetCustomAttributes(Type, Boolean)	При переопределении в производном классе, возвращает массив, содержащий настраиваемые атрибуты, примененные к данному члену и определяемый Type.(Наследуется от MemberInfo.)
 GetCustomAttributesData()	Возвращает список CustomAttributeData объекты, представляющие данные об атрибутах, которые были применены к целевой элемент.(Наследуется от MemberInfo.)
 GetDefaultMembers()	Выполняет поиск членов, определенных для текущего объекта Type, для которого задан атрибут DefaultMemberAttribute.
 GetElementType()	При переопределении в производном классе возвращает тип Type объекта, на который ссылается данный массив, указатель или ссылка или который инкапсулирован в этих объектах.
 GetEnumName(Object)	Возвращает имя константы с заданным значением для текущего типа перечисления.
 GetEnumNames()	Возвращает имена членов текущего типа перечисления.
 GetEnumUnderlyingType()	Возвращает базовый тип текущего типа перечисления.
 GetEnumValues()	Возвращает массив значений констант в текущем типе перечисления.
 GetEvent(String)	Возвращает объект EventInfo, представляющий указанное открытое событие.
 GetEvent(String, BindingFlags)	При переопределении в производном классе возвращает объект EventInfo, представляющий указанное событие, используя для этого указанные ограничения привязки.
 GetEvents()	Возвращает все открытые события, которые объявлены или унаследованы текущим объектом Type.
 GetEvents(BindingFlags)	При переопределении в производном классе ищет события, которые объявлены или унаследованы текущим объектом Type, используя указанные ограничения привязки.
 GetField(String)	Выполняет поиск открытого поля с заданным именем.
 GetField(String, BindingFlags)	Выполняет поиск указанного поля, используя заданные ограничения привязки.
 GetFields()	Возвращает все открытые поля текущего объекта Type.
 GetFields(BindingFlags)	При переопределении в производном классе ищет поля, определенные для текущего объекта Type, используя указанные ограничения привязки.
 GetGenericArguments()	Возвращает массив объектов Type, которые представляют аргументы закрытого универсального типа или параметры определения универсального типа.
 GetGenericParameterConstraints()	Возвращает массив объектов Type, которые представляют ограничения, накладываемые на параметр текущего универсального типа.
 GetGenericTypeDefinition()	Возвращает объект Type, представляющий определение универсального типа, на основе которого можно сконструировать текущий универсальный тип.
 GetHashCode()	Возвращает хэш-код для текущего экземпляра. (Переопределяет MemberInfo.GetHashCode().)
 GetInterface(String)	Выполняет поиск интерфейса с заданным именем.
 GetInterface(String, Boolean)	При переопределении в производном классе ищет интерфейс с заданным именем, позволяющий определить, нужно ли выполнять поиск без учета регистра.
 GetInterfaceMap(Type)	Возвращает сопоставление для интерфейса заданного типа.
 GetInterfaces()	При переопределении в производном классе возвращает все интерфейсы, реализуемые или наследуемые текущим объектом Type.
 GetMember(String)	Выполняет поиск открытого члена с заданным именем.
 GetMember(String, BindingFlags)	Выполняет поиск указанных членов, используя заданные ограничения привязки.
 GetMember(String, MemberTypes, BindingFlags)	Ищет указанные члены заданного типа, используя установленные ограничения привязки.
 GetMembers()	Возвращает все открытые члены текущего объекта Type.
 GetMembers(BindingFlags)	При переопределении в производном классе ищет члены, определенные для текущего объекта Type, используя указанные ограничения привязки.
 GetMethod(String)	Выполняет поиск открытого метода с заданным именем.
 GetMethod(String, BindingFlags)	Выполняет поиск указанного метода, используя заданные ограничения привязки.
 GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])	Ищет метод с параметрами, соответствующими указанным модификаторам и типам аргументов, с учетом заданных ограничений привязки и соглашений о вызовах.
 GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])	Ищет заданный метод, параметры которого соответствуют указанным типам аргументов и модификаторам, используя установленные ограничения привязки.
 GetMethod(String, Type[])	Ищет указанный открытый метод, параметры которого соответствуют заданным типам аргументов.
 GetMethod(String, Type[], ParameterModifier[])	Выполняет поиск указанного открытого метода, параметры которого соответствуют указанным типам аргументов и модификаторам.
 GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])	При переопределении в производном классе ищет указанный метод, параметры которого соответствуют указанным типам аргументов и модификаторам, используя для этого заданные ограничения привязки и соглашение о вызовах.
 GetMethods()	Возвращает все открытые методы текущего объекта Type.
 GetMethods(BindingFlags)	При переопределении в производном классе ищет методы, определенные для текущего объекта Type, используя указанные ограничения привязки.
 GetNestedType(String)	Выполняет поиск открытого вложенного типа с заданным именем.
 GetNestedType(String, BindingFlags)	При переопределении в производном классе ищет указанный вложенный тип, используя заданные ограничения привязки.
 GetNestedTypes()	Возвращает открытые типы, вложенные в текущий объект Type.
 GetNestedTypes(BindingFlags)	При переопределении в производном классе ищет типы, вложенные в текущий объект Type, используя заданные ограничения привязки.
 GetProperties()	Возвращает все открытые свойства текущего объекта Type.
 GetProperties(BindingFlags)	При переопределении в производном классе ищет свойства текущего объекта Type, используя указанные ограничения привязки.
 GetProperty(String)	Выполняет поиск открытого свойства с заданным именем.
 GetProperty(String, BindingFlags)	Ищет указанное свойство, используя заданные ограничения привязки.
 GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])	Ищет свойство с параметрами, соответствующими указанным модификаторам и типам аргументов, с учетом заданных ограничений привязки.
 GetProperty(String, Type)	Выполняет поиск открытого свойства с заданным именем и типом возвращаемого значения.
 GetProperty(String, Type, Type[])	Ищет указанное открытое свойство, параметры которого соответствуют указанным типам аргументов.
 GetProperty(String, Type, Type[], ParameterModifier[])	Ищет заданное открытое свойство, параметры которого соответствуют указанным типам аргументов и модификаторам.
 GetProperty(String, Type[])	Ищет указанное открытое свойство, параметры которого соответствуют указанным типам аргументов.
 GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])	При переопределении в производном классе выполняет поиск заданного свойства, параметры которого соответствуют типам и модификаторам заданных аргументов, с использованием заданных ограничений привязки.
 GetType()	Возвращает текущий Type.
 static	GetType(String)	Возвращает объект Type с указанным именем, учитывая при поиске регистр.
 static	GetType(String, Boolean)	Возвращает объект Type с заданным именем, выполняя поиск с учетом регистра и указывая, будет ли создаваться исключение в случае невозможности найти тип.
 static	GetType(String, Boolean, Boolean)	Возвращает объект Type с указанным именем, позволяющий определить, будет ли создаваться исключение в случае невозможности найти тип и будет ли учитываться регистр при поиске.
 static	GetType(String, Func<AssemblyName, Assembly>, Func<Assembly, String, Boolean, Type>)	Возвращает тип с указанным именем; дополнительно может предоставлять настраиваемые методы для разрешения сборки и типа.
 static	GetType(String, Func<AssemblyName, Assembly>, Func<Assembly, String, Boolean, Type>, Boolean)	Возвращает тип с заданным именем и указывает, следует ли создавать исключение в случае невозможности найти тип, а также может предоставлять настраиваемые методы для разрешения сборки и типа.
 static	GetType(String, Func<AssemblyName, Assembly>, Func<Assembly, String, Boolean, Type>, Boolean, Boolean)	Возвращает тип с заданным именем и указывает, следует ли выполнять поиск без учета регистра и следует ли создавать исключение в случае невозможности найти тип, а также может предоставлять настраиваемые методы для разрешения сборки и типа.
 static	GetTypeArray(Object[])	Возвращает типы объектов в указанном массиве.
 static	GetTypeCode(Type)	Возвращает код базового типа указанного объекта Type.
 GetTypeCodeImpl()	Возвращает код базового типа этого Type экземпляра.
 static	GetTypeFromCLSID(Guid)	Возвращает тип, связанный с заданным кодом CLSID.
 static	GetTypeFromCLSID(Guid, Boolean)	Возвращает тип, связанный с заданным кодом CLSID, позволяющий определить, будет ли выбрасываться исключение в случае происхождения ошибки при загрузке типа.
 static	GetTypeFromCLSID(Guid, String)	Возвращает с указанного сервера тип, связанный с заданным кодом CLSID.
 static	GetTypeFromCLSID(Guid, String, Boolean)	Возвращает с указанного сервера тип, связанный с заданным кодом CLSID, позволяющий определить, будет ли выбрасываться исключение при происхождении ошибки во время загрузки типа.
 static	GetTypeFromHandle(RuntimeTypeHandle)	Возвращает тип, на который ссылается указанный дескриптор типа.
 static	GetTypeFromProgID(String)	Возвращает тип, связанный с указанным идентификатором ProgID, и возвращает значение NULL, если при загрузке объекта Type возникла ошибка.
 static	GetTypeFromProgID(String, Boolean)	Возвращает тип, связанный с заданным идентификатором ProgID, позволяющим определить, будет ли выбрасываться исключение при происхождении ошибки во время загрузки типа.
 static	GetTypeFromProgID(String, String)	Возвращает с указанного сервера тип, связанный с заданным идентификатором ProgID, и возвращает значение NULL, если при загрузке типа произошла ошибка.
 static	GetTypeFromProgID(String, String, Boolean)	Возвращает с указанного сервера тип, связанный с заданным идентификатором progID, который позволяет определить, будет ли выбрасываться исключение при происхождении ошибки во время загрузки типа.
 static	GetTypeHandle(Object)	Возвращает дескриптор Type для указанного объекта.
 HasElementTypeImpl()	При переопределении в производном классе реализует свойство HasElementType и определяет, что содержится в текущем объекте Type: непосредственно другой тип или же указывающая на него ссылка (иными словами, является ли текущий объект Type массивом, указателем или параметром или же он передается по ссылке).
 InvokeMember(String, BindingFlags, Binder, Object, Object[])	Вызывает указанный член, соответствующий заданным ограничениям привязки и указанному списку аргументов.
 InvokeMember(String, BindingFlags, Binder, Object, Object[], CultureInfo)	Вызывает указанный член, соответствующий заданным ограничениям привязки, списку аргументов, а также языку и региональным параметрам.
 InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])	При переопределении в производном классе вызывает указанный член, соответствующий заданным ограничениям привязки, списку аргументов, модификаторов, а также языку и региональным параметрам.
 IsArrayImpl()	При переопределении в производном классе реализует свойство IsArray и определяет, является ли данный объект Type массивом.
 IsAssignableFrom(Type)	Определяет, может ли экземпляр указанного типа, который назначен экземпляр текущего типа.
 IsByRefImpl()	При переопределении в производном классе реализует свойство IsByRef и определяет, передается ли данный объект Type по ссылке.
 IsCOMObjectImpl()	При переопределении в производном классе реализует свойство IsCOMObject и определяет, является ли объект Type COM-объектом.
 IsContextfulImpl()	Реализует свойство IsContextful и определяет, можно ли поместить в контекст данный объект Type.
 IsDefined(Type, Boolean)	При переопределении в производном классе указывает, применяется ли к данному элементу один или несколько атрибутов указанного типа или его производных типов.(Наследуется от MemberInfo.)
 IsEnumDefined(Object)	Возвращает значение, показывающее, имеется ли в текущем типе перечисления указанное значение.
 IsEquivalentTo(Type)	Определяет, имеют ли два типа модели COM одинаковые удостоверения и могут ли они считаться эквивалентными.
 IsInstanceOfType(Object)	Определяет, является ли указанный объект экземпляром текущего типа Type.
 IsMarshalByRefImpl()	Реализует свойство IsMarshalByRef и определяет, маршалируется ли объект Type по ссылке.
 IsPointerImpl()	При переопределении в производном классе реализует свойство IsPointer и определяет, является ли объект Type указателем.
 IsPrimitiveImpl()	При переопределении в производном классе реализует свойство IsPrimitive и определяет, является ли объект Type одним из типов-примитивов.
 IsSubclassOf(Type)	Определяет, является ли текущий Type производным от указанного Type.
 IsValueTypeImpl()	Реализует свойство IsValueType и определяет, является ли объект Type типом значения (иными словами, не является классом или интерфейсом).
 MakeArrayType()	Возвращает объект Type, представляющий одномерный массив текущего типа с нижней границей, равной нулю.
 MakeArrayType(Int32)	Возвращает объект Type, представляющий массив текущего типа указанной размерности.
 MakeByRefType()	Возвращает объект Type, который представляет текущий тип при передаче в качестве параметра ref (параметра ByRef в Visual Basic).
 MakeGenericType(Type[])	Замещает элементы массива типов для параметров определения текущего универсального типа и возвращает объект Type, представляющий сконструированный результирующий тип.
 MakePointerType()	Возвращает объект Type, который представляет указатель на текущий тип.
 MemberwiseClone()	Создает неполную копию текущего объекта Object.(Наследуется от Object.)
 static	ReflectionOnlyGetType(String, Boolean, Boolean)	Возвращает объект Type с заданным именем, позволяющий определить, будет ли учитываться регистр при поиске, и будет ли создаваться исключение в случае невозможности найти тип. Тип загружается не для выполнения, а только для отражения.
 ToString()	Возвращает объект типа String, представляющий имя текущего объекта Type.(Переопределяет Object.ToString().)

Поля
 static	Delimiter	Разделяет имена в пространстве имен класса Type. Это поле доступно только для чтения.
 static	EmptyTypes	Представляет пустой массив типа Type. Это поле доступно только для чтения.
 static	FilterAttribute	Предоставляет фильтр членов, используемый для атрибутов. Это поле доступно только для чтения.
 static	FilterName	Представляет фильтр членов с учетом регистра, применяемый к именам. Это поле доступно только для чтения.
 static	FilterNameIgnoreCase	Представляет фильтр членов без учета регистра, применяемый к именам. Это поле доступно только для чтения.
 static	Missing	Представляет отсутствующее значение в данных объекта Type. Это поле доступно только для чтения.

Операторы
 static	Equality(Type, Type)	Определение равенства двух объектов Type.
 static	Inequality(Type, Type)	Определяет неравенство двух объектов Type.

Явные реализации интерфейса
 _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)	Сопоставляет набор имен соответствующему набору идентификаторов диспетчеризации.(Наследуется от MemberInfo.)
 _MemberInfo.GetType()	Возвращает Type представляющий MemberInfo класса.(Наследуется от MemberInfo.)
 _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)	Возвращает сведения о типе объекта, которые затем могут использоваться для получения сведений о типе интерфейса.(Наследуется от MemberInfo.)
 _MemberInfo.GetTypeInfoCount(UInt32)	Возвращает количество предоставляемых объектом интерфейсов для доступа к сведениям о типе (0 или 1).(Наследуется от MemberInfo.)
 _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)	Предоставляет доступ к открытым свойствам и методам объекта.(Наследуется от MemberInfo.)
 _Type.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)	Сопоставляет набор имен соответствующему набору идентификаторов диспетчеризации.
 _Type.GetTypeInfo(UInt32, UInt32, IntPtr)	Возвращает сведения о типе объекта, которые затем могут использоваться для получения сведений о типе интерфейса.
 _Type.GetTypeInfoCount(UInt32)	Возвращает количество предоставляемых объектом интерфейсов для доступа к сведениям о типе (0 или 1).
 _Type.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)	Предоставляет доступ к открытым свойствам и методам объекта.

Методы расширения
 GetCustomAttribute(Type)	Перегружен. Извлекает пользовательский атрибут указанного типа, который применяется для указанного элемента.(Определяется в CustomAttributeExtensions.)
 GetCustomAttribute(Type, Boolean)	Перегружен. Извлекает пользовательский атрибут указанного типа, применяется для заданного элемента и при необходимости проверяет предков этого члена.(Определяется в CustomAttributeExtensions.)
 GetCustomAttribute<T>()	Перегружен. Извлекает пользовательский атрибут указанного типа, который применяется для указанного элемента.(Определяется в CustomAttributeExtensions.)
 GetCustomAttribute<T>(Boolean)	Перегружен. Извлекает пользовательский атрибут указанного типа, применяется для заданного элемента и при необходимости проверяет предков этого члена.(Определяется в CustomAttributeExtensions.)
 GetCustomAttributes()	Перегружен. Возвращает коллекцию настраиваемых атрибутов, применяемых к указанному члену.(Определяется в CustomAttributeExtensions.)
 GetCustomAttributes(Type)	Перегружен. Возвращает коллекцию настраиваемых атрибутов указанного типа, применяемых к указанному члену.(Определяется в CustomAttributeExtensions.)
 GetCustomAttributes<T>(Boolean)	Перегружен. Получает коллекцию настраиваемых атрибутов указанного типа, применяемых к указанному члену и при необходимости проверяет предков этого члена.(Определяется в CustomAttributeExtensions.)
 GetRuntimeEvent(String)	Получает объект, представляющий указанное событие.(Определяется в RuntimeReflectionExtensions.)
 GetRuntimeEvents()	Возвращает коллекцию, представляющий все события, определенные для указанного типа.(Определяется в RuntimeReflectionExtensions.)
 GetRuntimeField(String)	Получает объект, представляющий значение заданного поля.(Определяется в RuntimeReflectionExtensions.)
 GetRuntimeFields()	Возвращает коллекцию, представляющую все поля, определенные в указанном типе.(Определяется в RuntimeReflectionExtensions.)
 GetRuntimeMethod(String, Type[])	Получает объект, представляющий указанный метод.(Определяется в RuntimeReflectionExtensions.)
 GetRuntimeMethods()	Возвращает коллекцию, представляющую все методы, определенные в указанном типе.(Определяется в RuntimeReflectionExtensions.)
 GetRuntimeProperties()	Получает коллекцию, которая представляет все свойства, определенные для указанного типа.(Определяется в RuntimeReflectionExtensions.)
 GetRuntimeProperty(String)	Получает объект, представляющий указанное свойство.(Определяется в RuntimeReflectionExtensions.)
 GetTypeInfo()	Возвращает TypeInfo представление указанного типа.(Определяется в IntrospectionExtensions.)
 IsDefined(Type)	Перегружен. Указывает, применяются ли настраиваемые атрибуты заданного типа к указанному члену.(Определяется в CustomAttributeExtensions.)

Заметки
Примечание
Чтобы просмотреть исходный код .NET Framework для этого типа, см. раздел Reference Source. Просмотр исходного кода в Интернете, загружаемом справочнике для автономного просмотра и пошагово источники (включая исправления и обновления) во время отладки; see instructions.
Type является корневым элементом System.Reflection функциональные возможности и является основным способом доступа к метаданным. Использовать члены Type для получения сведений о объявление типа, о членах типа (например, конструкторы, методы, поля, свойства и события класса), модуля и сборки, в которой развернут данный класс.
Никаких разрешений не требуется для кода использовать отражение для получения сведений о типах и их членах, независимо от их уровней доступа. Никаких разрешений не требуется для кода использовать отражение для доступа к открытым членам или другим членам, уровни доступа которых сделали бы их видимыми во время обычной компиляции. Однако использовать отражение для доступа к членам, которые обычно были бы недоступны, например к закрытым или внутренним методам или защищенным полям типа коду не наследует класс, код должен иметь ReflectionPermission. См. раздел Security Considerations for Reflection.
Type — Абстрактный базовый класс, который может быть создано несколько реализаций. В системе всегда есть производный класс RuntimeType. В отражении все классы, начинающихся со слова среды выполнения каждого объекта в системе и поддерживают операции сравнения создаются только один раз.
Примечание
В сценариях многопоточности, не блокируют Type объекты для синхронизации доступа к static данных. Другой код, по которому нельзя было управлять, также может заблокировать тип класса. Это может привести к взаимоблокировке. Вместо этого следует синхронизировать доступ к статическим данным, заблокировав закрытый static объекта.
Примечание
Производный класс может обращаться к защищенным членам базовых классов вызывающего кода. Кроме того предоставляется доступ к членам сборки вызывающего кода. Как правило если доступ разрешен в коде с ранней привязкой, то разрешены и в коде с поздним связыванием.
Примечание
Интерфейсы, расширяющие другие интерфейсы, не наследуют методы, определенные в расширенные интерфейсы.

Какие типы представляют тип объекта?
Этот класс является потокобезопасным; несколько потоков могут одновременно считывать из экземпляра данного типа. Экземпляр Type класс может представлять любой из следующих типов:
Классы
Типы значений
Массивы
Интерфейсы
Перечисления
Делегаты
Сконструированных универсальных типов и определений универсальных типов
Введите аргументы и параметры сконструированных универсальных типов, определений универсальных типов и определений универсальных методов

Получение типа объекта
Type Объекта, связанного с определенным типом можно получить следующими способами:
Экземпляр Object.GetType возвращает Type представляющий тип экземпляра. Поскольку все управляемые типы являются производными от Object, GetType метод может быть вызван на экземпляре любого типа.
В следующем примере вызывается Object.GetType метод, чтобы определить тип каждого объекта в массив объектов среды выполнения.

using System;

public class Example
{
   public static void Main()
   {
      object[] values = { "word", true, 120, 136.34, 'a' };
      foreach (var value in values)
         Console.WriteLine("{0} - type {1}", value, 
                           value.GetType().Name);
   }
}
// The example displays the following output:
//       word - type String
//       True - type Boolean
//       120 - type Int32
//       136.34 - type Double
//       a - type Char

Статический Type.GetType методы возвращают Type объект, который представляет тип, указанный по его полному имени.
Module.GetTypes, Module.GetType, И Module.FindTypes методы возвращают Type объекты, представляющие типы, определенные в модуле. Первый метод может использоваться для получения массива Type объектов для всех открытых и закрытых типов, определенных в модуле. (Можно получить экземпляр Module через Assembly.GetModule или Assembly.GetModules метод, либо с помощью Type.Module свойств.)
System.Reflection.Assembly Объект содержит ряд методов для получения классы, определенные в сборке, включая Assembly.GetType, Assembly.GetTypes, и Assembly.GetExportedTypes.
FindInterfaces Метод возвращает отфильтрованный список типов интерфейсов, поддерживаемых типом.
GetElementType Возвращает Type объект, представляющий элемент.
GetInterfaces И GetInterface методы возвращают Type объекты, представляющие типы интерфейсов, поддерживаемых типом.
GetTypeArray Метод возвращает массив Type объекты, представляющие типы, заданные в произвольный набор объектов. Объекты заданы массивом типа Object.
GetTypeFromProgID И GetTypeFromCLSID предоставляются методы для COM-взаимодействия. Они возвращают Type объект, который представляет тип, указанный в ProgID или CLSID.
GetTypeFromHandle Метод предоставляется для обеспечения взаимодействия. Он возвращает Type представляющий тип, указанный с помощью дескриптора класса.
C# typeof оператор C++ typeid оператор и Visual Basic GetType оператор получения Type объекта типа.
MakeGenericType Возвращает Type объект, представляющий сконструированный универсальный тип, который является открытым сконструированным типом, если его ContainsGenericParameters возвращает true, и закрытый сконструированный тип в противном случае. Универсальный тип может быть создан только в том случае, если он закрыт.
MakeArrayType, MakePointerType, И MakeByRefType методы возвращают Type объекты, которые представляют, соответственно, массив указанного типа, указатель на заданный тип и тип ссылочного параметра (ref в C# ByRef в Visual Basic).

Сравнение типов объектов на равенство
Объект Type объект, представляющий тип, уникален, то есть два Type объекта ссылаются на тот же объект только в том случае, если они принадлежат к одному типу. Это позволяет сравнивать Type объекты с помощью равенство ссылок. В следующем примере сравниваются Type объекты, представляющие количество целочисленных значений, чтобы определить, является ли они того же типа.

using System;

public class Example
{
   public static void Main()
   {
      long number1 = 1635429;
      int number2 = 16203;
      double number3 = 1639.41;
      long number4 = 193685412;

      // Get the type of number1.
      Type t = number1.GetType();

      // Compare types of all objects with number1.
      Console.WriteLine("Type of number1 and number2 are equal: {0}",
                        Object.ReferenceEquals(t, number2.GetType()));
      Console.WriteLine("Type of number1 and number3 are equal: {0}",
                        Object.ReferenceEquals(t, number3.GetType()));
      Console.WriteLine("Type of number1 and number4 are equal: {0}",
                        Object.ReferenceEquals(t, number4.GetType()));
   }
}
// The example displays the following output:
//       Type of number1 and number2 are equal: False
//       Type of number1 and number3 are equal: False
//       Type of number1 and number4 are equal: True

Примеры

В следующем примере показано несколько типичных функций класса Type. C# typeof оператор (GetType оператор в языке Visual Basic typeid оператор в Visual C++) используется для получения Type объект, представляющий String. Из этого Type объекта, GetMethod метод используется для получения MethodInfo представляющий Substring перегрузку, принимающую начальную точку и длиной.
Для идентификации сигнатуры перегрузки, в примере кода создается временный массив, содержащий два Type объектов представляет int (Integer в Visual Basic).
Примечание
Точнее, массив содержит две ссылки на экземпляр Type представляющий int в текущем домене приложения. Для любого типа существует только один экземпляр Type домена приложения.
В примере кода используется MethodInfo для вызова Substring метод на строку «Hello, World!» и отображает результат.

using System;
using System.Reflection;

class Example
{
    static void Main()
    {
        Type t = typeof(String);

        MethodInfo substr = t.GetMethod("Substring", 
            new Type[] { typeof(int), typeof(int) });

        Object result = 
            substr.Invoke("Hello, World!", new Object[] { 7, 5 });
        Console.WriteLine("{0} returned \"{1}\".", substr, result);
    }
}

/* This code example produces the following output:

System.String Substring(Int32, Int32) returned "World".
 */